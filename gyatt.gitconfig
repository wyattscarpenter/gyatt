# This is gyatt. See https://github.com/wyattscarpenter/gyatt
# If you modify any of these lines (without making a pull request with the new changes to gyatt (or, I suppose, removing these comment lines so that this file no longer claims to be gyatt)), then for your own sake as well as mine I recommend you leave a comment by the option with YOUR NAME and why you've done what you've done. This will help you later if you need to locate problems.
# This file is alphabetized for quick reference (normal gitconfig files are not alphabetized — they are simply in whatever chronological order the options were set from the command line — but this one was written by hand, so I did alphabetize it). First by section, then within each section by each option. This means you will probably want to skip past the [alias] section at first to check out the options at the bottom, which are likely to be more important to you.
# See also: https://git-scm.com/docs/git-config#_configuration_file
[alias]
	abandon = reset --hard @{upstream} # Abandon the local copy and switch to origin.
	amend = commit --amend --no-edit # Note that this does not amend with unstaged changes, which is what I want half the time, but half the time is not what I want.
	amendall = commit -a --amend --no-edit # This also amends using the unstaged changes, which is what I want half the time, but half the time is not what I want.
	amendallall = ! git add -A ; git commit -a --amend --no-edit # This also amends using untracked files, which are now tracked. This is rarely wanted, but sometimes convenient.
	b = branch --verbose
	bash = ! bash -c # This allows me to execute commands in the bash that comes bundled with git-for-windows, if need be (the need is quite rare. Note that you typically have to quote the argument to this. Eg, git bash "python -m rich". Because otherwise they're just further arguments to bash I guess.
	be = ! git-be
	br = b
	blast = ! git-blast
	c = commit # TODO: I kind of regret having this alias bc it's easy to confuse with checkout so I don't use git c often. So maybe remove it later.
	cd = checkout
	ch = checkout
	check = ! git diff --staged --check && git diff --check && git diff --check $(git hash-object -t tree /dev/null) # Like git diff --check but for everything (although note that it will only report further errors once you've dealt with what's staged, then what's changed, then finally it will report on everything that's tracked). # Thanks be to http://peter.eisentraut.org/blog/2014/11/04/checking-whitespace-with-git #TODO /  Pet peeve unlocked: git will complain at you if you commit a file that has no new line at the end of the file; but it will not warn about this in git diff --check
	cherrypick = cherry-pick
	chmod = ! git-chmod
	chomd = chmod
	clear = git move @
	conforg = config --show-origin
	cp = cherry-pick # I might regret this alias later, since cp can also mean "copy", and there's, like, a git mv already that a git cp could exist in analogy to.
	d = ! header STAGED && git diff --word-diff=color --staged && header WORKING && git diff --word-diff=color #have to diff both the index and the working tree (both the stage and the file system (the part that git tracks, at least))
	du = ! printf '%s (%s) %s\\n' `du --summarize --human-readable \"$(git root)\" | cut -f 1` `LC_NUMERIC=en_US.UTF-8 du --summarize --block-size=\"'KiB\" \"$(git root)\"` # (would like to use c-printf-standard %3$s stuff here, to discard additional arguments, but apparently bash printf does not (yet?) support that)
	dugc = ! git du && git gc --aggressive && git du
	f = fetch --all
	fg = ! git f && git g # Not to be confused with the fg command of the unix world.
	fgg = ! git f && git gg # For some reason all of {fg, fgg, fggg} seem to do fgg? Also, on git for windows at least, it seems f doesn't print any output.
	fggg = ! git f && git ggg
	fsg = ! git f && git s && git gg # This is basically what I always want to do to look at the current state of a git repo. Could use a better alias, perhaps. Also collides with what I'm currently calling "git survey", right now, a little bit.
	find-and-replace = !git grep -I --name-only "$1" | xargs sed -i "s/$1/$2/g"
	forsake = abandon
	g = ! git log --all --graph --pretty=format:'%C(bold blue)%as %Cgreen%ad%Creset %C(auto)%h%d %s %C(bold black)<%aN>%Creset' --date=format-local:'%H:%M (%a)' #format inspired by https://gist.github.com/niun/ca61a37791ff1fdc9b33 # The ! git part is necessary, or else this does not work on Windows (replacing with double quotes will not cure the problem either). # I later decided to add a unix call as well for the net loc
	gg = g -20 # Although the number 20 is fundamentally arbitrary here, and is chosen mostly just to comfortably fit in a default cmd window; and g is arbitrary and I just wanted to type it twice for fast typing; I like to amuse myself by pretending there is some great and noble correspondence between g, giga-, billion, twice million, and 20. Although my case is weakened by the fact that a mebi is 2^20, which is an even twentier number.
	ggg = g -40
	git = ! git # handles the ever-so-important `git git` case. Might fail (or do something unexpected) if you have git renamed to something else, I guess.
	l = log
	ll = log -5
	ln = ! git-ln
	ls = ls-files --stage --abbrev -t --exclude-standard  ':(glob)*'
	mb = move-branch
	move = reset --hard # The idea here is that you move the head (and current branch tip ref, naturally) to the specified commit. # TODO: ideally this should also be able to handle `git move from to`... also should abort if there are any unsaved changes, unless you --force. But this means I'll have to write my own shell script...
	move-br = move-branch
	move-branch = move
	nocheckin = ! git-nocheckin # this sets up the nocheckin *system*. as opposed to git nocheckins, which checks for *tokens* of nocheckin
	nocheckins = grep --cached --line-number -i \\\\bno""checkin\\\\b # Checks for the existence of the forbidden string # I don't really understand why you need to quadruple backslash here, instead of 1 or 2, but ok. The "" in the middle is just so that it doesn't pick up itself, which I do where I can (not on the left side, for example; it's impossible there).  # --cached is the old way of writing --staged, and we have to use it here, at least in my version of git. # Note that if git commit -am is called (and nocheckins is called in the pre-commit), the changes will be staged temporarily, then this command will run; so it does work correctly for pre-commit purposes. # "Of course, the pre-commit flash flash step paid ability window lil yatchy laptop!"
	netloc = ! git-netloc
	obv = ! git-obv # Honestly I don't know why we can't just put this script in this line directly. But it gives us "fatal: bad config line", at least in git version 2.45.2.windows.1
	ok = ! git status --short && git stash list && git to""do && git no""checkins && git check #TODO: check if up-to-date with upstream? also check if all tags pushed to upstream? Also all git notes pushed to upstream? And all submodules are up to date?? And all subtrees (I guess you don't have to do anything special for git subtree, so maybe that's "for free")?? #this command checks if a repo is "ok", and lists any ways in which it is not "ok". “This world is imperfect; if only I could wipe away the impurities, and make it as beautiful as ME.” —https://www.youtube.com/watch?v=DN9DW4rrEjY
	po = push --set-upstream origin HEAD
	pfush = push --force-with-lease --force-if-includes # the safest type of force push
	pffush = push --force-with-lease # the second-safest type of force push
	r = remote -v
	reb = rebase
	rebcont = ! git diff --check && git add -u && git -c core.editor=true rebase --continue # continue a rebase or merge without editing the message. See https://stackoverflow.com/questions/43489971/how-to-suppress-the-editor-for-git-rebase-continue
	rebforsake = ! git checkout --theirs . && git rebcont # This command is for when there's a conflict in the middle of a rebase and you want to just let the other changes (say, from upstream) win instead of manually reconciling them. #todo: also make mergecont and mergeforsake?
	remove-from-history = ! git-remove-from-history #todo: can this be inlined here?
	replace-all-in-history = ! git-replace-all-in-history #todo: can this be inlined here?
	root = rev-parse --show-toplevel
	s = status
	sa = stash list
	sh = show --word-diff=color #also might regret this alias one day as sh is also a shell.
	sl = stash list # unfortunately, not the popular "steam locomotive" binary #might get rid of this later
	ss = s -s
	signoff = ! git-signoff # I get a mysterious "end-of-file" error if I try to inline this.
	st = s
	statuses = ! gits-status # todo: I should have a consistent rule on if I include aliases that would also be scripts added to path. For example, git-obv being both a script that git would find if you add the gyatt folder to the path and also an alias to said script, listed above. This comes to attention here because I'd like this to be both git-statuses and gits-status, the later of which won't be found on path by git. But this is an easy todo, really. (Currently, my answer is "yes", but I should ponder if my answer should be "no" for DRY or other reasons.) # It seems like maybe all of the scripts are going to have to be named git-whatever.sh, and then the alias sends whatever to ! git-whatever.sh, for the simple reason that otherwise git-for-windows will find git-whatever the file first, and will error on failing to execute it. #actually you can also fix that by putting a shebang at the top of the file, so I guess it's just a quirk of git.
	survey = ! git-survey.sh
	t = tag
	todo = grep --line-number -i \\\\bto""do\\\\b # I don't really understand why you need to quadruple backslash here, instead of 1 or 2, but ok. The "" in the middle is just so that it doesn't pick up itself, which I do where I can (not on the left side, for example; it's impossible there).
	touch = ! touch "$@" && git add "$@"
	touchx = ! touch "$@" && git add --chmod=+x "$@"
	w = whoami
	whoami = ! git config --get user.name && git config --get user.email
[commit]
	verbose = true
[credential]
	useHttpPath = true
[diff]
	wsErrorHighlight = all
[gc]
	auto = 0 # Disables automatic garbage collection. See Gyatt readme for more on why this is a good idea.
[init]
	defaultBranch = master
[rerere]
	enabled = true
