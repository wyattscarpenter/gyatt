#!/bin/sh
echo This script adds a pre-commit hook to the .git/hooks folder of the current directory that prevents committing if the forbidden string is found anywhere. There are many ways one can do this, but we go for maximum simplicity: the file is just one line of bash. Specifically, a git diff grep command.
echo Amusingly, this means you cannot mention the string anywhere in the repo, including in file names! We use shell quotation nonsense to hide these strings from themselves in the rare case that these files are somehow indexed by git, although this is unlikely because their file names are forbidden.

# This command could have a global mode, which would set `git config --global core.hooksPath` to a folder with the pre-commit script in it, but that seems like it would clobber the other possible hooks the user may have set up for the project, so nevermind, we won't do that.

if [ -e .git/hooks/pre-commit ] && [ "$1" != "-f" ] ; then
  echo "ERROR: .git/hooks/pre-commit already exists, and I wouldn't want to overwrite it. Pass -f to overwrite it."
  exit 1
else
  printf '#!/bin/sh\nexit `git no""checkins | tee -a /dev/stderr | wc -l`\n' >.git/hooks/pre-commit # /dev/stderr is not unix-standard, but it is fairly portable. And, like... I need to print a message to the user, so...
  chmod +x .git/hooks/pre-commit
fi
